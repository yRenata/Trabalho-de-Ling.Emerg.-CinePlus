// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Genero {
  id             Int         @id @default(autoincrement())
  nome           String      @db.VarChar(30)
  filmes         Filme[]
  @@map("generos")
}

model Filme {
  id             Int            @id @default(autoincrement())
  titulo         String         @db.VarChar(200)
  sinopse        String?        @db.VarChar(1000)
  ano            Int            @db.SmallInt
  duracao        Int
  preco          Decimal?       @db.Decimal(10, 2)
  foto           String         
  tipoAcesso     TipoAcesso     @default(PLUS)
  destaque       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt()
  genero         Genero         @relation(fields: [generoId], references: [id])
  generoId       Int
  avaliacoes     Avaliacao[]
  admin          Admin?         @relation(fields: [adminId], references: [id])
  adminId        Int?           
  @@map("filmes")
}

model Cliente {
  id          String            @db.VarChar(36) @id @default(uuid())
  nome        String            @db.VarChar(60)
  email       String            @db.VarChar(40)
  senha       String            @db.VarChar(60) // Senha deve ser varchar(60)
  cidade      String            @db.VarChar(30)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  avaliacoes  Avaliacao[]
}

model Avaliacao {
  id          Int               @id @default(autoincrement())
  cliente     Cliente           @relation(fields: [clienteId], references: [id])
  clienteId   String            @db.VarChar(36)
  filme       Filme             @relation(fields: [filmeId], references: [id])
  filmeId     Int  
  comentario  String            @db.VarChar(355)
  nota        Int
  resposta    String?
  createdAt   DateTime          @default(now())
  updateAt    DateTime          @updatedAt
  admin       Admin?            @relation(fields: [adminId], references: [id])
  adminId     Int?
  denunciado Boolean         @default(false)          
  @@map("avaliacoes")
}

model Admin{
  id          Int       @id @default(autoincrement())
  nome        String    @db.VarChar(60)
  email       String    @db.VarChar(40)
  senha       String    @db.VarChar(60) 
  nivel       Int       @db.SmallInt @default(2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  filmes     Filme[]
  avaliacoes Avaliacao[]
  @@map("admins")
}

enum TipoAcesso {
  PLUS
  PAGO
}